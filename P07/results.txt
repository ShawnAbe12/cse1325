====================
HOMEWORK P07 RESULTS
====================

Fall 2024


FULL CREDIT
===========

NOTE: These are measurements which may vary plus your opinions which may vary a LOT. We won't grade for "correctness", just completeness.

QUESTION 1: What Boggle command line arguments ([#boards] and if not default [boardSize])did you use to achieve a 30 to 45 second runtime? Note: We're only interested in the "real" seconds for this question.



time java Boggle 200

Found 73883 solutions
Hash is 0x1BAA829A

real    0m36.418s
user    0m0.000s
sys     0m0.015s




QUESTION 2: Provide the full output (including the time command) for your program, with 1 to 16 threads. **Ensure that the result is the same for all 16 runs.** With bash, you can run all of these with a single command if you like, replacing "90" with whatever Boggle command line arguments you identified in QUESTION 1: 

for i in {1..16} ; do echo ; echo $i Threads; time java Boggle 90 - $i ; done

time java Boggle 200 - $i

Found 73883 solutions
Hash is 0x1BAA829A

real    0m35.028s
user    0m0.000s
sys     0m0.000s



QUESTION 3: Does adding more threads continue to speed up the program? Do more threads ever slow down the program slightly?  Why or why not?

Yes to a certain point. At a certain point if the number of threads exceeds the maximum number of threads then the program slows down because of the waiting time for threads to finsh and join because a thread number larger than the max num of threads has to wait for the thread in front of it to finish before it can start.



QUESTION 4: Does adding more threads increase the "system load", or is it constant regardless of the number of threads?  Why?

Yes, from 0.285 seconds to 1.667 seconds for this data set







BONUS
=====

QUESTION 5: Time your version of Boggle as you did for the full credit version. Is this additional layer of threading faster, slower, or roughly equivalent in performance? Why?


YOUR Timing:


